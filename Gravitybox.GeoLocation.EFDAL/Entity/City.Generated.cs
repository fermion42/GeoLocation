//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 612
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;
using Gravitybox.GeoLocation.EFDAL;
using Gravitybox.GeoLocation.EFDAL.EventArguments;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Entity;
using System.Data.Linq;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;

namespace Gravitybox.GeoLocation.EFDAL.Entity
{
	/// <summary>
	/// The 'City' entity
	/// </summary>
	[DataContract]
	[Serializable]
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	[FieldNameConstants(typeof(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Gravitybox.GeoLocation.EFDAL.Entity.Metadata.CityMetadata))]
	[EntityMetadata("City", false, true, true, true, "", true, false, false, "dbo")]
	public partial class City : BaseEntity, Gravitybox.GeoLocation.EFDAL.IBusinessObject, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging, System.ICloneable, Gravitybox.GeoLocation.EFDAL.IAuditable, Gravitybox.GeoLocation.EFDAL.IAuditableSet, Gravitybox.GeoLocation.EFDAL.ICreatable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'City' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'CityId' property
			/// </summary>
			[System.ComponentModel.DataAnnotations.Key]
			[System.ComponentModel.ReadOnly(true)]
			[System.ComponentModel.Description("Field mapping for the 'CityId' property")]
			CityId,
			/// <summary>
			/// Field mapping for the 'Name' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Name' property")]
			Name,
			/// <summary>
			/// Field mapping for the 'Population' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Population' property")]
			Population,
			/// <summary>
			/// Field mapping for the 'State' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'State' property")]
			State,
			/// <summary>
			/// Field mapping for the 'CreatedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedBy' property")]
			CreatedBy,
			/// <summary>
			/// Field mapping for the 'CreatedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedDate' property")]
			CreatedDate,
			/// <summary>
			/// Field mapping for the 'ModifiedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedBy' property")]
			ModifiedBy,
			/// <summary>
			/// Field mapping for the 'ModifiedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedDate' property")]
			ModifiedDate,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Initializes a new instance of the Gravitybox.GeoLocation.EFDAL.Entity.City class
		/// </summary>
		public City()
		{

		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'City.CityId' field.
		/// </summary>
		/// <remarks>Field: [City].[CityId], Not Nullable, Primary Key, AutoNumber, Unique, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("CityId")]
		[System.ComponentModel.DataAnnotations.Schema.Index(IsUnique = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int CityId
		{
			get { return _cityId; }
			protected internal set
			{
				if (value == _cityId) return;
				var eventArg = new Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<int>(value, "CityId");
				this.OnPropertyChanging(eventArg);
				if (eventArg.Cancel) return;
				_cityId = eventArg.Value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("CityId"));
			}
		}

		/// <summary>
		/// The property that maps back to the database 'City.Name' field.
		/// </summary>
		/// <remarks>Field: [City].[Name], Field Length: 100, Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Name")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string Name
		{
			get { return _name; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Name))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "City.Name", GetMaxLength(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Name)));
				if (value == _name) return;
				var eventArg = new Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string>(value, "Name");
				this.OnPropertyChanging(eventArg);
				if (eventArg.Cancel) return;
				_name = eventArg.Value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("Name"));
			}
		}

		/// <summary>
		/// The property that maps back to the database 'City.Population' field.
		/// </summary>
		/// <remarks>Field: [City].[Population], Nullable</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("Population")]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual int? Population
		{
			get { return _population; }
			set
			{
				if (value == _population) return;
				var eventArg = new Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<int?>(value, "Population");
				this.OnPropertyChanging(eventArg);
				if (eventArg.Cancel) return;
				_population = eventArg.Value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("Population"));
			}
		}

		/// <summary>
		/// The property that maps back to the database 'City.State' field.
		/// </summary>
		/// <remarks>Field: [City].[State], Field Length: 50, Nullable, Indexed</remarks>
		[DataMember]
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DisplayName("State")]
		[System.ComponentModel.DataAnnotations.Schema.Index()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string State
		{
			get { return _state; }
			set
			{
				if ((value != null) && (value.Length > GetMaxLength(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.State))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "City.State", GetMaxLength(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.State)));
				if (value == _state) return;
				var eventArg = new Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string>(value, "State");
				this.OnPropertyChanging(eventArg);
				if (eventArg.Cancel) return;
				_state = eventArg.Value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("State"));
			}
		}

		/// <summary>
		/// The audit field for the 'Created By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string CreatedBy
		{
			get { return _createdby; }
			protected internal set
			{
				var eventArg = new Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string>(value, "CreatedBy");
				this.OnPropertyChanging(eventArg);
				if (eventArg.Cancel) return;
				_createdby = eventArg.Value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("CreatedBy"));
			}
		}

		/// <summary />
		protected string _createdby;

		/// <summary>
		/// The audit field for the 'Created Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime? CreatedDate
		{
			get { return _createddate; }
			protected internal set
			{
				var eventArg = new Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<DateTime?>(value, "CreatedDate");
				this.OnPropertyChanging(eventArg);
				if (eventArg.Cancel) return;
				_createddate = eventArg.Value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("CreatedDate"));
			}
		}

		/// <summary />
		protected DateTime? _createddate;

		/// <summary>
		/// The audit field for the 'Modified By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual string ModifiedBy
		{
			get { return _modifiedby; }
			protected internal set
			{
				var eventArg = new Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string>(value, "ModifiedBy");
				this.OnPropertyChanging(eventArg);
				if (eventArg.Cancel) return;
				_modifiedby = eventArg.Value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("ModifiedBy"));
			}
		}

		/// <summary />
		protected string _modifiedby;

		/// <summary>
		/// The audit field for the 'Modified Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual DateTime? ModifiedDate
		{
			get { return _modifieddate; }
			protected internal set
			{
				var eventArg = new Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<DateTime?>(value, "ModifiedDate");
				this.OnPropertyChanging(eventArg);
				if (eventArg.Cancel) return;
				_modifieddate = eventArg.Value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("ModifiedDate"));
			}
		}

		/// <summary />
		protected DateTime? _modifieddate;

		/// <summary>
		/// The audit field for the 'Timestamp' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[DataMember()]
		[System.Diagnostics.DebuggerNonUserCode()]
		public virtual byte[] TimeStamp
		{
			get { return _timestamp; }
			protected internal set
			{
				var eventArg = new Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<byte[]>(value, "TimeStamp");
				this.OnPropertyChanging(eventArg);
				if (eventArg.Cancel) return;
				_timestamp = eventArg.Value;
				this.OnPropertyChanged(new PropertyChangedEventArgs("TimeStamp"));
			}
		}

		/// <summary />
		protected byte[] _timestamp;

		#endregion

		#region Property Holders

		/// <summary />
		protected int _cityId;
		/// <summary>
		/// Occurs when the 'CityId' property value change is a pending.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<int>> CityIdChanging;

		/// <summary>
		/// Raises the OnCityIdChanging event.
		/// </summary>
		protected virtual void OnCityIdChanging(Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<int> e)
		{
			if (this.CityIdChanging != null)
				this.CityIdChanging(this, e);
		}

		/// <summary>
		/// Occurs when the 'CityId' property value has changed.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<ChangedEventArgs<int>> CityIdChanged;

		/// <summary>
		/// Raises the OnCityIdChanged event.
		/// </summary>
		protected virtual void OnCityIdChanged(ChangedEventArgs<int> e)
		{
			if (this.CityIdChanged != null)
				this.CityIdChanged(this, e);
		}

		/// <summary />
		protected string _name;
		/// <summary>
		/// Occurs when the 'Name' property value change is a pending.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string>> NameChanging;

		/// <summary>
		/// Raises the OnNameChanging event.
		/// </summary>
		protected virtual void OnNameChanging(Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string> e)
		{
			if (this.NameChanging != null)
				this.NameChanging(this, e);
		}

		/// <summary>
		/// Occurs when the 'Name' property value has changed.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<ChangedEventArgs<string>> NameChanged;

		/// <summary>
		/// Raises the OnNameChanged event.
		/// </summary>
		protected virtual void OnNameChanged(ChangedEventArgs<string> e)
		{
			if (this.NameChanged != null)
				this.NameChanged(this, e);
		}

		/// <summary />
		protected int? _population;
		/// <summary>
		/// Occurs when the 'Population' property value change is a pending.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<int?>> PopulationChanging;

		/// <summary>
		/// Raises the OnPopulationChanging event.
		/// </summary>
		protected virtual void OnPopulationChanging(Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<int?> e)
		{
			if (this.PopulationChanging != null)
				this.PopulationChanging(this, e);
		}

		/// <summary>
		/// Occurs when the 'Population' property value has changed.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<ChangedEventArgs<int?>> PopulationChanged;

		/// <summary>
		/// Raises the OnPopulationChanged event.
		/// </summary>
		protected virtual void OnPopulationChanged(ChangedEventArgs<int?> e)
		{
			if (this.PopulationChanged != null)
				this.PopulationChanged(this, e);
		}

		/// <summary />
		protected string _state;
		/// <summary>
		/// Occurs when the 'State' property value change is a pending.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string>> StateChanging;

		/// <summary>
		/// Raises the OnStateChanging event.
		/// </summary>
		protected virtual void OnStateChanging(Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string> e)
		{
			if (this.StateChanging != null)
				this.StateChanging(this, e);
		}

		/// <summary>
		/// Occurs when the 'State' property value has changed.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<ChangedEventArgs<string>> StateChanged;

		/// <summary>
		/// Raises the OnStateChanged event.
		/// </summary>
		protected virtual void OnStateChanged(ChangedEventArgs<string> e)
		{
			if (this.StateChanged != null)
				this.StateChanged(this, e);
		}

		/// <summary>
		/// Occurs when the 'CreatedBy' property value change is a pending.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string>> CreatedByChanging;

		/// <summary>
		/// Raises the OnCreatedByChanging event.
		/// </summary>
		protected virtual void OnCreatedByChanging(Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string> e)
		{
			if (this.CreatedByChanging != null)
				this.CreatedByChanging(this, e);
		}

		/// <summary>
		/// Occurs when the 'CreatedBy' property value has changed.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<ChangedEventArgs<string>> CreatedByChanged;

		/// <summary>
		/// Raises the OnCreatedByChanged event.
		/// </summary>
		protected virtual void OnCreatedByChanged(ChangedEventArgs<string> e)
		{
			if (this.CreatedByChanged != null)
				this.CreatedByChanged(this, e);
		}

		/// <summary>
		/// Occurs when the 'CreatedDate' property value change is a pending.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<DateTime?>> CreatedDateChanging;

		/// <summary>
		/// Raises the OnCreatedDateChanging event.
		/// </summary>
		protected virtual void OnCreatedDateChanging(Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<DateTime?> e)
		{
			if (this.CreatedDateChanging != null)
				this.CreatedDateChanging(this, e);
		}

		/// <summary>
		/// Occurs when the 'CreatedDate' property value has changed.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<ChangedEventArgs<DateTime?>> CreatedDateChanged;

		/// <summary>
		/// Raises the OnCreatedDateChanged event.
		/// </summary>
		protected virtual void OnCreatedDateChanged(ChangedEventArgs<DateTime?> e)
		{
			if (this.CreatedDateChanged != null)
				this.CreatedDateChanged(this, e);
		}

		/// <summary>
		/// Occurs when the 'ModifiedBy' property value change is a pending.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string>> ModifiedByChanging;

		/// <summary>
		/// Raises the OnModifiedByChanging event.
		/// </summary>
		protected virtual void OnModifiedByChanging(Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<string> e)
		{
			if (this.ModifiedByChanging != null)
				this.ModifiedByChanging(this, e);
		}

		/// <summary>
		/// Occurs when the 'ModifiedBy' property value has changed.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<ChangedEventArgs<string>> ModifiedByChanged;

		/// <summary>
		/// Raises the OnModifiedByChanged event.
		/// </summary>
		protected virtual void OnModifiedByChanged(ChangedEventArgs<string> e)
		{
			if (this.ModifiedByChanged != null)
				this.ModifiedByChanged(this, e);
		}

		/// <summary>
		/// Occurs when the 'ModifiedDate' property value change is a pending.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<DateTime?>> ModifiedDateChanging;

		/// <summary>
		/// Raises the OnModifiedDateChanging event.
		/// </summary>
		protected virtual void OnModifiedDateChanging(Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<DateTime?> e)
		{
			if (this.ModifiedDateChanging != null)
				this.ModifiedDateChanging(this, e);
		}

		/// <summary>
		/// Occurs when the 'ModifiedDate' property value has changed.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<ChangedEventArgs<DateTime?>> ModifiedDateChanged;

		/// <summary>
		/// Raises the OnModifiedDateChanged event.
		/// </summary>
		protected virtual void OnModifiedDateChanged(ChangedEventArgs<DateTime?> e)
		{
			if (this.ModifiedDateChanged != null)
				this.ModifiedDateChanged(this, e);
		}

		/// <summary>
		/// Occurs when the 'TimeStamp' property value change is a pending.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<byte[]>> TimeStampChanging;

		/// <summary>
		/// Raises the OnTimeStampChanging event.
		/// </summary>
		protected virtual void OnTimeStampChanging(Gravitybox.GeoLocation.EFDAL.EventArguments.ChangingEventArgs<byte[]> e)
		{
			if (this.TimeStampChanging != null)
				this.TimeStampChanging(this, e);
		}

		/// <summary>
		/// Occurs when the 'TimeStamp' property value has changed.
		/// </summary>
		[field:NonSerialized]
		public event EventHandler<ChangedEventArgs<byte[]>> TimeStampChanged;

		/// <summary>
		/// Raises the OnTimeStampChanged event.
		/// </summary>
		protected virtual void OnTimeStampChanged(ChangedEventArgs<byte[]> e)
		{
			if (this.TimeStampChanged != null)
				this.TimeStampChanged(this, e);
		}


		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants field)
		{
			switch (field)
			{
				case Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.CityId:
					return 0;
				case Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Name:
					return 100;
				case Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Population:
					return 0;
				case Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.State:
					return 50;
			}
			return 0;
		}

		int Gravitybox.GeoLocation.EFDAL.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type Gravitybox.GeoLocation.EFDAL.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants field)
		{
			if (field.GetType() != typeof(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants'.");

			switch ((Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants)field)
			{
				case Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.CityId: return typeof(int);
				case Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Name: return typeof(string);
				case Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Population: return typeof(int?);
				case Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.State: return typeof(string);
			}
			return null;
		}

		System.Type Gravitybox.GeoLocation.EFDAL.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants'.");

			return GetFieldType((Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object Gravitybox.GeoLocation.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((Gravitybox.GeoLocation.EFDAL.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object Gravitybox.GeoLocation.EFDAL.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants'.");
			return this.GetValue((Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants)field, defaultValue);
		}

		void Gravitybox.GeoLocation.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants'.");
			this.SetValue((Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants)field, newValue);
		}

		void Gravitybox.GeoLocation.EFDAL.IBusinessObject.SetValue(System.Enum field, object newValue, bool fixLength)
		{
			if (field.GetType() != typeof(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants))
				throw new Exception("The field parameter must be of type 'Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants'.");
			this.SetValue((Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants)field, newValue, fixLength);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Generic primary key for this object
		/// </summary>
		Gravitybox.GeoLocation.EFDAL.IPrimaryKey Gravitybox.GeoLocation.EFDAL.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return new PrimaryKey(Util.HashPK("City", this.CityId)); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			return Gravitybox.GeoLocation.EFDAL.Entity.City.Clone(this);
		}

		/// <summary>
		/// Creates a shallow copy of this object with defined, default values and new PK
		/// </summary>
		public virtual object CloneAsNew()
		{
			var item = Gravitybox.GeoLocation.EFDAL.Entity.City.Clone(this);
			item._cityId = 0;
			return item;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static City Clone(Gravitybox.GeoLocation.EFDAL.Entity.City item)
		{
			var newItem = new City();
			newItem.CityId = item.CityId;
			newItem.Name = item.Name;
			newItem.Population = item.Population;
			newItem.State = item.State;
			newItem.CreatedDate = item.CreatedDate;
			newItem.CreatedBy = item.CreatedBy;
			newItem.ModifiedDate = item.ModifiedDate;
			newItem.ModifiedBy = item.ModifiedBy;
			return newItem;
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public virtual object GetValue(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants field, object defaultValue)
		{
			if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.CityId)
				return this.CityId;
			if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Name)
				return ((this.Name == null) ? defaultValue : this.Name);
			if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Population)
				return ((this.Population == null) ? defaultValue : this.Population);
			if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.State)
				return ((this.State == null) ? defaultValue : this.State);
			if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.CreatedBy)
				return ((this.CreatedBy == null) ? defaultValue : this.CreatedBy);
			if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.CreatedDate)
				return ((this.CreatedDate == null) ? defaultValue : this.CreatedDate);
			if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.ModifiedBy)
				return ((this.ModifiedBy == null) ? defaultValue : this.ModifiedBy);
			if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.ModifiedDate)
				return ((this.ModifiedDate == null) ? defaultValue : this.ModifiedDate);
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.CityId)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Name)
			{
				this.Name = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.Population)
			{
				this.Population = GlobalValues.SetValueHelperIntNullableInternal(newValue);
			}
			else if (field == Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants.State)
			{
				this.State = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "cityid": return "cityid";
				case "name": return "name";
				case "population": return "population";
				case "state": return "state";
				case "createddate": return "createddate";
				case "createdby": return "createdby";
				case "modifieddate": return "modifieddate";
				case "modifiedby": return "modifiedby";
				case "timestamp": return "timestamp";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "cityid": return "City";
				case "name": return "City";
				case "population": return "City";
				case "state": return "City";
				case "createdby": return "City";
				case "createddate": return "City";
				case "modifiedby": return "City";
				case "modifieddate": return "City";
				case "timestamp": return "City";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "cityid": return "City";
				case "name": return "City";
				case "population": return "City";
				case "state": return "City";
				case "createdby": return "City";
				case "createddate": return "City";
				case "modifiedby": return "City";
				case "modifieddate": return "City";
				case "timestamp": return "City";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[cityid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "City") + "].[cityid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[name\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "City") + "].[name]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[population\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "City") + "].[population]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[state\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "City") + "].[state]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createdby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "City") + "].[createdby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "City") + "].[createddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifiedby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "City") + "].[modifiedby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifieddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "City") + "].[modifieddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[timestamp\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "City") + "].[timestamp]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: Gravitybox.GeoLocation.EFDAL.GeoLocationEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where, QueryOptimizer optimizer)
		{
			return DeleteData(where: where, optimizer: optimizer, startup: new ContextStartup(null), connectionString: Gravitybox.GeoLocation.EFDAL.GeoLocationEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where, string connectionString)
		{
			return DeleteData(where: where, optimizer: new QueryOptimizer(), startup: new ContextStartup(null), connectionString: connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="startup">The startup options</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where, QueryOptimizer optimizer, ContextStartup startup, string connectionString)
		{
			if (optimizer == null)
				optimizer = new QueryOptimizer();
				if (startup == null) startup = new ContextStartup(null);

			using (var connection = Gravitybox.GeoLocation.EFDAL.DBHelper.GetConnection(Gravitybox.GeoLocation.EFDAL.Util.StripEFCS2Normal(connectionString)))
			{
				using (var dc = new DataContext(connection))
				{
					var template = dc.GetTable<Gravitybox.GeoLocation.EFDAL.CityQuery>();
					using (var cmd = BusinessEntityQuery.GetCommand<Gravitybox.GeoLocation.EFDAL.CityQuery>(dc, template, where))
					{
						if (!startup.DefaultTimeout && startup.CommandTimeout > 0) cmd.CommandTimeout = startup.CommandTimeout;
						else
						{
							var cb = new System.Data.SqlClient.SqlConnectionStringBuilder(connectionString);
							cmd.CommandTimeout = cb.ConnectTimeout;
						}

						var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
						var sql = "CREATE TABLE #t ([CityId] [Int])";
						sql += "set rowcount " + optimizer.ChunkSize + ";";
						sql += "INSERT INTO #t ([CityId])";
						sql += "SELECT [t0].[CityId] #t\r\n";
						sql += parser.GetFromClause(optimizer) + "\r\n";
						sql += parser.GetWhereClause();
						sql += "\r\n";

						var noLock = string.Empty;
						noLock = (optimizer.NoLocking ? "WITH (READUNCOMMITTED) " : string.Empty);
						sql += "DELETE [City] FROM [dbo].[City] " + noLock + "INNER JOIN #t ON [dbo].[City].[CityId] = #t.[CityId]\r\n";
						sql += ";select @@rowcount";
						sql = "set ansi_nulls off;" + sql + ";drop table #t;";
						cmd.CommandText = sql;
						dc.Connection.Open();
						var startTime = DateTime.Now;
						var affected = 0;
						var count = 0;
						do
						{
							count = (int)cmd.ExecuteScalar();
							affected += count;
						} while (count > 0 && optimizer.ChunkSize > 0);
						var endTime = DateTime.Now;
						optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
						dc.Connection.Close();
						return affected;
					}
				}
			}
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>> select, Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where, TSource newValue)
		{
			return BusinessObjectQuery<Gravitybox.GeoLocation.EFDAL.Entity.City, Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "City", getField: GetDatabaseFieldName, hasModifyAudit: true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connection">An open database connection</param>
		/// <param name="transaction">The database connection transaction</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>> select, Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where, TSource newValue, System.Data.IDbConnection connection, System.Data.Common.DbTransaction transaction)
		{
			return BusinessObjectQuery<Gravitybox.GeoLocation.EFDAL.Entity.City, Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "City", getField: GetDatabaseFieldName, hasModifyAudit: true, startup: null, connection: connection, transaction: transaction);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="startup">A configuration object</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>> select, Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where, TSource newValue, ContextStartup startup, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.GeoLocation.EFDAL.Entity.City, Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "City", getField: GetDatabaseFieldName, hasModifyAudit: true, startup: startup, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>> select, Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where, TSource newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.GeoLocation.EFDAL.Entity.City, Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "City", getField: GetDatabaseFieldName, hasModifyAudit: true, connectionString: connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>> select, Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where, Gravitybox.GeoLocation.EFDAL.Entity.City newValue)
		{
			return BusinessObjectQuery<Gravitybox.GeoLocation.EFDAL.Entity.City, Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "City", getField: GetDatabaseFieldName, hasModifyAudit: true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The database connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData<TSource>(Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>> select, Expression<Func<Gravitybox.GeoLocation.EFDAL.CityQuery, bool>> where, Gravitybox.GeoLocation.EFDAL.Entity.City newValue, string connectionString)
		{
			return BusinessObjectQuery<Gravitybox.GeoLocation.EFDAL.Entity.City, Gravitybox.GeoLocation.EFDAL.CityQuery, TSource>.UpdateData(select: select, where: where, newValue: newValue, leafTable: "City", getField: GetDatabaseFieldName, hasModifyAudit: true, connectionString: connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Gravitybox.GeoLocation.EFDAL.Entity.City.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "CityId": return "CityId";
				case "Name": return "Name";
				case "Population": return "Population";
				case "State": return "State";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
				case "ModifiedBy": return "ModifiedBy";
				case "ModifiedDate": return "ModifiedDate";
				case "TimeStamp": return "TimeStamp";
			}
			return string.Empty;
		}

		#endregion

		#region Auditing
		string Gravitybox.GeoLocation.EFDAL.IAuditableSet.CreatedBy
		{
			get { return this.CreatedBy; }
			set { this.CreatedBy = value; }
		}

		string Gravitybox.GeoLocation.EFDAL.IAuditableSet.ModifiedBy
		{
			get { return this.ModifiedBy; }
			set { this.ModifiedBy = value; }
		}
		string Gravitybox.GeoLocation.EFDAL.IAuditable.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		System.DateTime? Gravitybox.GeoLocation.EFDAL.IAuditable.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		bool Gravitybox.GeoLocation.EFDAL.IAuditable.IsCreateAuditImplemented
		{
			get { return true; }
		}

		bool Gravitybox.GeoLocation.EFDAL.IAuditable.IsModifyAuditImplemented
		{
			get { return true; }
		}

		bool Gravitybox.GeoLocation.EFDAL.IAuditable.IsTimestampAuditImplemented
		{
			get { return true; }
		}

		string Gravitybox.GeoLocation.EFDAL.IAuditable.ModifiedBy
		{
			get { return this.ModifiedBy; }
		}

		System.DateTime? Gravitybox.GeoLocation.EFDAL.IAuditable.ModifiedDate
		{
			get { return this.ModifiedDate; }
		}

		byte[] Gravitybox.GeoLocation.EFDAL.IAuditable.TimeStamp
		{
			get { return this.TimeStamp; }
		}

		void IAuditableSet.ResetModifiedBy(string modifier)
		{
			if (this.ModifiedBy != modifier)
				this.ModifiedBy = modifier;
		}

		void IAuditableSet.ResetCreatedBy(string modifier)
		{
			if (this.CreatedBy != modifier)
				this.CreatedBy = modifier;
			((IAuditableSet)this).ResetModifiedBy(modifier);
		}

		System.DateTime? Gravitybox.GeoLocation.EFDAL.IAuditableSet.CreatedDate
		{
			get { return this.CreatedDate; }
			set { this.CreatedDate = value; }
		}

		System.DateTime? Gravitybox.GeoLocation.EFDAL.IAuditableSet.ModifiedDate
		{
			get { return this.ModifiedDate; }
			set { this.ModifiedDate = value; }
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'City' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Gravitybox.GeoLocation.EFDAL.Entity.City;
			if (other == null) return false;
			return (
				other.CityId == this.CityId &&
				other.Name == this.Name &&
				other.Population == this.Population &&
				other.State == this.State
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

	}
}

#region Metadata Class

namespace Gravitybox.GeoLocation.EFDAL.Entity.Metadata
{
	/// <summary>
	/// Metadata class for the 'City' entity
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "6.0.0")]
	public partial class CityMetadata : Gravitybox.GeoLocation.EFDAL.IMetadata
	{
		#region Properties

		/// <summary>
		/// Metadata information for the 'CityId' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required(ErrorMessage = "'CityId' is required.", AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "CityId", AutoGenerateField = true)]
		public object CityId;

		/// <summary>
		/// Metadata information for the 'Name' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "The property 'Name' has a maximum length of 100")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Name", AutoGenerateField = true)]
		public object Name;

		/// <summary>
		/// Metadata information for the 'Population' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "Population", AutoGenerateField = true)]
		public object Population;

		/// <summary>
		/// Metadata information for the 'State' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(50, ErrorMessage = "The property 'State' has a maximum length of 50")]
		[System.ComponentModel.DataAnnotations.Display(Description = "", Name = "State", AutoGenerateField = true)]
		public object State;

		/// <summary>
		/// Metadata information for the 'CreatedBy' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "The property 'CreatedBy' has a maximum length of 100")]
		[System.ComponentModel.ReadOnly(true)]
		public object CreatedBy;

		/// <summary>
		/// Metadata information for the 'CreatedDate' parameter
		/// </summary>
		[System.ComponentModel.ReadOnly(true)]
		public object CreatedDate;

		/// <summary>
		/// Metadata information for the 'ModifiedBy' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "The property 'ModifiedBy' has a maximum length of 100")]
		[System.ComponentModel.ReadOnly(true)]
		public object ModifiedBy;

		/// <summary>
		/// Metadata information for the 'ModifiedDate' parameter
		/// </summary>
		[System.ComponentModel.ReadOnly(true)]
		public object ModifiedDate;

		/// <summary>
		/// Metadata information for the 'TimeStamp' parameter
		/// </summary>
		[System.ComponentModel.DataAnnotations.Timestamp()]
		[System.ComponentModel.DataAnnotations.ConcurrencyCheck()]
		[System.ComponentModel.ReadOnly(true)]
		public object TimeStamp;

		#endregion

		#region Methods
		/// <summary>
		/// Gets the underlying table name.
		/// </summary>
		public virtual string GetTableName()
		{
			return "City";
		}

		/// <summary>
		/// Gets a list of all object fields with alias/code facade applied excluding inheritance.
		/// </summary>
		public virtual List<string> GetFields()
		{
			var retval = new List<string>();
			retval.Add("CityId");
			retval.Add("Name");
			retval.Add("Population");
			retval.Add("State");
			return retval;
		}

		/// <summary>
		/// Returns the type of the parent object if one exists.
		/// </summary>
		public virtual System.Type InheritsFrom()
		{
			return null;
		}

		/// <summary>
		/// Returns the database schema name.
		/// </summary>
		public virtual string Schema()
		{
			return "dbo";
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		public virtual string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "CityId": return "CityId";
				case "Name": return "Name";
				case "Population": return "Population";
				case "State": return "State";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
				case "ModifiedBy": return "ModifiedBy";
				case "ModifiedDate": return "ModifiedDate";
				case "TimeStamp": return "TimeStamp";
			}
			return string.Empty;
		}

		#endregion

	}

}

#endregion

#pragma warning restore 612

